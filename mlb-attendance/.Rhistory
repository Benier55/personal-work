rainfall <- cbind(rainfall$Date,sapply(rainfall[,-1],cumsum), stringsAsFactors= F)
rainfall <- rainfall1
?bind_rows
rainfall <- bind_cols(rainfall$Date,sapply(rainfall1[,-1],cumsum))
rainfall <- cbind.data.frame(rainfall$Date,sapply(rainfall1[,-1],cumsum))
class(rainfall[,2])
row.names(rainfall) <- rainfall[,1]
rainfall <- rainfall[,-1]
rainfall <- rainfall1
row.names(rainfall) <- rainfall[,1]
rainfall <- sapply(rainfall[,-1],cumsum)
a <- melt(rainfall, variable.names <- c("Date","Year"))
rainfall <- rainfall1
row.names(rainfall) <- rainfall[,1]
?sapply
rainfall <- sapply(rainfall[,-1],cumsum)
rainfall <- rainfall1
row.names(rainfall) <- rainfall[,1]
rainfall <- sapply(rainfall[,-1],cumsum, USE.NAMES = F)
rainfall <- rainfall1
row.names(rainfall) <- rainfall[,1]
rainfall <- sapply(rainfall[,-1],cumsum, SIMPLIFY = FALSE)
rainfall <- rainfall1
dates <- rainfall[,1]
rainfall <- sapply(rainfall[,-1],cumsum)
row.names(rainfall) <- dates
a <- melt(rainfall, variable.names <- c("Date","Year"))
ggplot(a, aes(x=Date,y=value)) +
geom_line(alpha = .5)
ggplot(a, aes(x=Date,y=value, color= Year)) +
geom_line(alpha = .5)
ggplot(a, aes(x=Date,y=value, color= Year)) +
geom_point()
ggplot(a, aes(x=Date,y=value, color= Year)) +
geom_line()
j <- ggplot(economics, aes(date, unemploy))
j + geom_line()
j
j + geom_point()
ggplot(a, aes(x=Date,y=value)) +
geom_line()
ggplot(a, aes(x=Date,y=value, colour= Year)) +
geom_line()
ggplot(a, aes(x=Date,y=value, colour= Year, group =1)) +
geom_line()
ggplot(rainfall, aes(x=Date, y=rain2011) +
geom_line()
ggplot(rainfall, aes(x=Date, y=rain2011)) +
geom_line()
class(rainfall)
class(a)
ggplot(as.data.frame(rainfall), aes(x=Date, y=rain2011)) +
geom_line()
ggplot(as.data.frame(rainfall), aes(x=row.names(), y=rain2011)) +
geom_line()
rainfall$Date <- row.names(rainfall)
rainfall <- rainfall1
ggplot(as.data.frame(rainfall), aes(x=Date, y=rain2011)) +
geom_line()
ggplot(as.data.frame(rainfall), aes(x=Date, y=rain2011)) +
geom_line(group=1)
dates <- rainfall[,1]
rainfall <- sapply(rainfall[,-1],cumsum)
row.names(rainfall) <- dates
ggplot(as.data.frame(rainfall), aes(y=rain2011)) +
geom_line(group=1)
a <- melt(rainfall, variable.names <- c("Date","Year"))
ggplot(a, aes(x=Date,y=value, colour= Year)) +
geom_line(group =1)
a1 <- subset(a, Year == rain2011)
a1 <- subset(a, Year == "rain2011")
View(a1)
ggplot(a1, aes(x=Date,y=value, colour= Year)) +
geom_line(group =1)
class(rainfall)
ggplot(as.data.frame(rainfall), aes(x = row.names(rainfall))
)
geom_line(aes(y=rain2011))
ggplot(as.data.frame(rainfall), aes(x = row.names(rainfall))) +
geom_line(aes(y=rain2011))
ggplot(as.data.frame(rainfall), aes(x = row.names(rainfall))) +
geom_line(aes(y=rain2011, group =1))
ggplot(as.data.frame(rainfall), aes(x = row.names(rainfall))) +
geom_line(aes(y=rain2011, group =1)) +
geom_line(aes(y=rain2012, group =1))
rainfall <- data.frame("Date" = seq.Date(as.Date("2012/01/01"),as.Date("2012/12/31"), by=1))
rainfall$Date <- format(rainfall$Date, "%m-%d")
sink("/dev/null")
suppressMessages(
for (i in 1990:2016) {
tmp <- getWeatherForDate(
"KMSP",
paste0(i,"-01-01"),
ifelse(i==year(Sys.Date()),as.character(Sys.Date()),paste0(i,"-12-31")),
opt_custom_columns = T,
custom_columns = 20)
tmp$PrecipitationIn <- as.numeric(gsub("T","0",tmp$PrecipitationIn))
tmp$Date <- format(tmp$Date, "%j")
if (!leap_year(i)) { tmp <- bind_rows(
tmp,
data.frame(
Date="059.5",
PrecipitationIn=0)) }
tmp <- arrange(tmp,Date)
tmp <- tmp[,-1]
if(i==year(Sys.Date())) { tmp <- append(tmp,rep(NA,366))[1:366]}
rainfall <- cbind(rainfall,tmp, stringsAsFactors = F)
colnames(rainfall)[ncol(rainfall)] <- paste0("rain",i)
}
)
sink()
rainfall <- data.frame("Date" = seq.Date(as.Date("2012/01/01"),as.Date("2012/12/31"), by=1))
rainfall$Date <- format(rainfall$Date, "%m-%d")
sink("/dev/null")
suppressMessages(
for (i in 1990:2016) {
tmp <- getWeatherForDate(
"KMSP",
paste0(i,"-01-01"),
ifelse(i==year(Sys.Date()),as.character(Sys.Date()),paste0(i,"-12-31")),
opt_custom_columns = T,
custom_columns = 20)
tmp$PrecipitationIn <- as.numeric(gsub("T","0",tmp$PrecipitationIn))
tmp$Date <- format(tmp$Date, "%j")
if (!leap_year(i)) { tmp <- bind_rows(
tmp,
data.frame(
Date="059.5",
PrecipitationIn=0)) }
tmp <- arrange(tmp,Date)
tmp <- tmp[,-1]
if(i==year(Sys.Date())) { tmp <- append(tmp,rep(NA,366))[1:366] }
rainfall <- cbind.data.frame(rainfall,tmp, stringsAsFactors = F)
colnames(rainfall)[ncol(rainfall)] <- paste0("rain",i)
}
)
sink()
if(i==year(Sys.Date())) { tmp <- append(tmp,rep(NA,366))[1:366] }
i
leap_year(2000)
?leap_year
tmp <- getWeatherForDate(
"KMSP",
paste0(i,"-01-01"),
ifelse(i==year(Sys.Date()),as.character(Sys.Date()),paste0(i,"-12-31")),
opt_custom_columns = T,
custom_columns = 20)
View(tmp)
tmp$Date
plot(tmp$Date)
plot(tmp$Date, PrecipitationIn)
plot(tmp$Date, tmp$PrecipitationIn)
q <- seq.Date(as.Date(paste0(i,"/01/01")),as.Date(paste0(i,"/12/31")), by = 1)
head(q)
tmp1 <- left_join(q,tmp, by="Date")
q <- as.date.frame(q)
q <- as.data.frame(q)
View(q)
tmp1 <- left_join(q,tmp, by="Date")
colnames(q) <- "Date"
tmp1 <- left_join(q,tmp, by="Date")
class(q[1,1])
class(tmp[1,1])
q <- as.data.frame("Date" = seq.Date(as.POSIXlt(paste0(i,"/01/01")),as.POSIXlt(paste0(i,"/12/31")), by = 1))
q <- seq.Date(as.POSIXlt(paste0(i,"/01/01")),as.POSIXlt(paste0(i,"/12/31")), by = 1)
as.POSIXlt(seq.Date(as.Date(paste0(i,"/01/01")),as.Date(paste0(i,"/12/31")), by = 1))
q <- as.POSIXlt(seq.Date(as.Date(paste0(i,"/01/01")),as.Date(paste0(i,"/12/31")), by = 1))
q <- as.data.frame("Date" = q)
q <- as.data.frame(q
)
colnames(q) <- "Date"
tmp1 <- left_join(q, tmp, by ="Date")
class(q[1,1])
class(tmp[1,1,])
?as.POSIXlt
q <- as.POSIXlt(seq.Date(as.Date(paste0(i,"/01/01")),as.Date(paste0(i,"/12/31")), by = 1))
class(q)
q <- as.data.frame(q)
class(q)
class(q[,1])
q <- seq.Date(as.Date(paste0(i,"/01/01")),as.Date(paste0(i,"/12/31")), by = 1)
q <- as.data.frame(q)
q[,1] <- as.POSIXlt(q[,1])
install.packages("rnoaa")
library(rnoaa)
library(rnoaa)
library(rnoaa)
devtools::install_github("ropensci/rnoaa")
library(rnoaa)
install.packages(c("acs", "base64", "BH", "cluster", "crayon", "devtools", "evaluate", "forcats", "foreign", "formatR", "geosphere", "git2r", "glmnet", "highr", "HistData", "Hmisc", "htmltools", "htmlwidgets", "irlba", "knitr", "koRpus", "Lahman", "lattice", "lava", "lintr", "maps", "Matrix", "mgcv", "multcomp", "networkD3", "nlme", "numDeriv", "nycflights13", "OAIHarvester", "packrat", "plotrix", "proxy", "qdap", "quantreg", "R6", "raster", "rasterVis", "rgeos", "RgoogleMaps", "rmarkdown", "RMySQL", "rstudioapi", "Rttf2pt1", "rversions", "rvest", "RWeka", "selectr", "shiny", "sna", "sp", "SparseM", "stringdist", "survival", "swirl", "testthat", "topicmodels", "V8", "vcd", "withr", "wnominate", "xml2", "zoo"))
?read.csv
?log10
2900000/287168
900000/57000
24*30
source("/Users/david 1/GitHub/code/fecgrabber/fecgrabber.r")
fecgrabber("PaulsenQ3",1105261)
library(Lahman)
a <- data(SeriesPost)
data(SeriesPost)
?data
head(SeriesPost)
View(SeriesPost)
?getRetrosheet
??getRetrosheet
library(retrosheet)
getFileNames()
a <- getRetrosheet("schedule",2015)
View(a)
setwd("/Users/david 1/Documents/Postseason")
list.files()
ws <- read.csv("GLWS.TXT")
View(ws)
?read.csv
ws <- read.csv("GLWS.TXT", header= FALSE)
gamelogFields
colnames(a) <- gamelogFields
colnames(ws) <- gamelogFields
ls <- read.csv("GLLC.TXT", header = FALSE)
ds <- read.csv("GLDV.TXT", header = FALSE)
wc <- read.csv("GLWC.TXT", header = FALSE)
?rbind
ps <- rbind(ws, ls, ds, wc)
View(ds)
View(ls)
ps <- rbind(ws, ls)
ws <- read.csv("GLWS.TXT", header = FALSE)
ps <- rbind(ws, ls, ds, wc)
ps <- rbind(ws, ls)
rm(ps)
View(wc)
rm(wc)
g7 <- rbind(ws, ls)
ws <- read.csv("GLWS.TXT", header = FALSE, stringsAsFactors = F)
ls <- read.csv("GLLC.TXT", header = FALSE, stringsAsFactors = F)
ds <- read.csv("GLDV.TXT", header = FALSE, stringsAsFactors = F)
g7 <- rbind(ws, ls)
View(g7)
colnames(g7) <- gamelogFields
g7$winner <- if(HmRuns > VisRuns) {HmTm}
elseif(VisRuns > HmRuns) {VisTm}
else{"T"}
g7$winner <- if(g7$HmRuns > g7$VisRuns) {g7$HmTm}
elseif(g7$VisRuns > g7$HmRuns) {g7$VisTm}
else{"T"}
?countif
g7$Marg <- g7$HmRuns - g7$VisRuns
sum(g7$Marg == 0)
library(dplyr)
g7 <- arrange(g7,Date)
SeriesSweep <- subset(SeriesPost, losses == 0)
View(SeriesSweep)
SeriesSweep <- subset(SeriesPost, losses == 0 & rounds != "NLWC")
SeriesSweep <- subset(SeriesPost, losses == 0 & round != "NLWC")
SeriesSweep <- subset(SeriesPost, losses == 0 & round != "NLWC|ALWC")
SeriesSweep <- subset(SeriesPost, losses == 0 & round != "NLWC")
SeriesSweep <- subset(SeriesPost, losses == 0 & round != "NLWC" & round != "ALWC")
library(montgomeryutils)
?winnerodds
winnerodds(600,"Angie Craig","Jason Lewis",.46,.41)
36+33+26
winnerodds(579,"Erik Paulsen","Terri Bonoff",.49,.38)
library(RCurl)
library(tidyr)
library(maptools)
library(RColorBrewer)
library(sp)
library(shapefiles)
library(dplyr)
library(plotrix)
setwd("~/Dropbox/Sharing Folder/Code/20161108sosgrabber")
senate <- read.table(
textConnection(
getURL("ftp://ftp.sos.state.mn.us/20161108/stsenate.txt",userpwd = "media:results")),
sep=";")
senate <- senate[,c(4:8,11:16)]
colnames(senate) <- c("OfficeID","OfficeName","District","CandidateID","CandidateName","Party","PctsReporting","PctsTotal","Votes","VotesPct","VotesTotal")
senatewide <- senate %>% select(District, Party, PctsReporting, PctsTotal, Votes, VotesTotal) %>% group_by(District) %>% spread(Party, Votes)
senatenames <- senate %>% subset(Party != "WI") %>% select(District, Party, CandidateName) %>% group_by(District) %>% spread(Party, CandidateName) %>% rename(DFL.candidate = DFL, IP.candidate = IP, LIB.candidate = LIB, LMN.candidate = LMN, R.candidate = R)
senatewide <- left_join(senatewide, senatenames, by = "District")
senmap <- readShapePoly("~/Dropbox/Sharing Folder/Maps/S2012/S2012.shp")
senmap@data <- arrange(senmap@data, DISTRICT) %>% left_join(senatewide, by = c("DATA" = "District"))
sen2012 <-
read.table(
textConnection(
getURL("http://electionresults.sos.state.mn.us/Results/MediaResult/1?mediafileid=30")),
sep=";")
sen2012 <- sen2012[,c(4:8,11:16)]
colnames(sen2012) <- c("OfficeID","OfficeName","District","CandidateID","CandidateName","Party","PctsReporting","PctsTotal","Votes","VotesPct","VotesTotal")
sen2012w <- sen2012 %>% select(District, Party,Votes,VotesTotal) %>% group_by(District) %>% spread(Party, Votes)
sen2012w$Dpct <- sen2012w$DFL/sen2012w$VotesTotal
sen2012w$Rpct <- sen2012w$R/sen2012w$VotesTotal
sen2012w$marg <- sen2012w$Dpct-sen2012w$Rpct
sen2012w$marg[!complete.cases(sen2012w$marg)] <- 1
senmap@data$marg <- sen2012w$marg
senmap@data$PctsReporting <- round(runif(1, min = .8)*senmap@data$PctsTotal,0)
senmap@data$call <- ifelse((1-(senmap@data$PctsReporting/senmap@data$PctsTotal))/abs(senmap@data$DFL/senmap@data$VotesTotal-senmap@data$R/senmap@data$VotesTotal) <= 1, "C",NA)
for(i in 1:67) {
if(is.na(senmap@data$call[i])) {
senmap@data$color[i] <- "grey"
} else if (senmap@data$marg[i] > 0) {
senmap@data$color[i] <- "blue"
} else if (senmap@data$marg[i] < 0) {
senmap@data$color[i] <- "red"
} else {
senmap@data$color[i] <- "grey"
}
}
png("senmap.png", width=1000, height=1000)
par(mar = c(.5,.5,5,.5)) ## Set the margins
plot(
senmap,
col=senmap@data$color,
border = "white",
lwd=.4
)
dev.off()
?mtext
View(senmap@data)
library(plotly)
base_plot <- plot_ly(
type = "pie",
values = c(40, 10, 10, 10, 10, 10, 10),
labels = c("-", "0", "20", "40", "60", "80", "100"),
rotation = 108,
direction = "clockwise",
hole = 0.4,
textinfo = "label",
textposition = "outside",
hoverinfo = "none",
domain = list(x = c(0, 0.48), y = c(0, 1)),
marker = list(colors = c('rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)', 'rgb(255, 255, 255)')),
showlegend = FALSE
)
install.packages("plotly)")
setwd("/Users/david 1/Dropbox/Sharing Folder/Code/debate")
source("debatecloud.r")
debatecloud("clinton","trump","wallace")
debatecloud(c("clinton","trump","wallace"))
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
file <- "debate3.txt"
quotes <- read.delim(file, header = FALSE, sep = ":", stringsAsFactors = F)
View(quotes)
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
quotes <- read.delim(file, header = FALSE, sep = ":", stringsAsFactors = F)
length(subset(quotes, V1 == WALLACE, select = V2))
length(subset(quotes, V1 == "WALLACE", select = V2))
a <- subset(quotes, V1 == "WALLACE", select = V2)
View(a)
library(stringr)
?str_count
str_count(a)
str_count(quotes[V1 == "CLINTON",2])
str_count(subset(quotes, V1== "CLINTON", select = V2))
str_count(subset(quotes, V1== "TRUMP", select = V2))
library(dplyr)
a <- spread(quotes, V1, V2)
?spread
names <- c("clinton","trump","wallace")
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])}
write(clinton, "clinton.txt")
write(trump,"trump.txt")
write(wallace,"wallace.txt")
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
source("debatecloud.r")
debatecloud(c("clinton","trump","wallace"), "debate3.txt")
file = "debate3.txt"
names <- c("clinton","trump","wallace")
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace))}
quotes <- read.delim(file, header = FALSE, sep = ":", stringsAsFactors = F)
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace))}
head(clinton)
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace)) ## Strip out unnecessary whitespace.
assign(paste0(names[i],".tdm"), TermDocumentMatrix(get(names[i])))
}
clinton.tdm
for (i in 1:3) {
assign(names[i], subset(quotes, V1 == toupper(names[i]))[,2])
# Process the transcripts
assign(
names[i],
unlist(
lapply(get(names[i]), function(x) { str_split(x, "\n")})))
assign(names[i], Corpus(VectorSource(get(names[i]))))
assign(names[i], tm_map(get(names[i]), content_transformer(tolower))) ## Make everything lowercase
assign(names[i], tm_map(get(names[i]), removeWords,stopwords("english"))) ## Remove common English words like "and" and "the".
assign(names[i], tm_map(get(names[i]), removePunctuation)) ## Remove punctuation
assign(names[i], tm_map(get(names[i]), stripWhitespace))}
inspect(wallace)
a <- lapply(wallace, as.character)
head(a)
a <- sapply(trump, as.character)
head(a)
str_count(a)
sum(str_count(a))
b <- sapply(clinton, as.character)
sum(str_count(b))
str_count(b)
setwd("/Users/david 1/Dropbox/Sharing Folder/Maps/Absentee ballots 2016")
source("absenteemap.r")
absenteemap("102016 ballots.xls")
sosdate <- "102016"
sosdate[1:2]
sosdate[[1:2]]
substring(sosdate,1,2)
absenteemap("102016 ballots.xls")
paste0(
"as of ",
substring(sosdate,1,2),
"/",
substring(sosdate,3,4),"/",
substring(sosdate,5,6))
source("absenteemap.r)
source("absenteemap.r")
absenteemap("102016 ballots.xls")
absenteemap("101316 ballots.xls")
file = "102016 ballots.xls"
library(dplyr)
library(maptools)
library(xlsx)
library(Hmisc)
library(RColorBrewer)
library(ggplot2)
library(scales)
sosdate <- substr(file, 1, 6)
ballots <- read.xlsx(file, sheetIndex = 1, stringsAsFactors = F) %>% arrange(Accepted)
ballots <- ballots[-88,]
ballots$County <- gsub(" County Totals:","",ballots$County)
ballots$County <- gsub("St. ","Saint ",ballots$County)
ballots$County <- gsub("Mcleod","McLeod",ballots$County)
ballots$County <- gsub("Of The","of the",ballots$County)
ballots$num <- as.numeric(row.names(ballots))
counties <- readShapePoly("~/Dropbox/Sharing Folder/Maps/mn counties/county.shp")
counties@data <- suppressWarnings(
left_join(
counties@data,
ballots,
by = c("COUNTYNAME" = "County")
)
)
counties@data$Log <- log10(counties@data$Accepted)
colors <- brewer.pal(6,"Greens")
counties@data <- counties@data %>% mutate(color = colors[trunc(counties@data[,13])+1])
counts <- count(counties@data, trunc(Log))
View(counts)
View(counties@data)
?count
?rbind
rbind(counts,c(0,0))
ifelse(counts[1,1] != 0, counts <- rbind(counts,c(0,0))
)
View(counts)
counts <- count(counties@data, trunc(Log))
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),trunc(Log))
)
colnames(counts) <- c("category","n")
counts <- count(counties@data, trunc(Log))
colnames(counts) <- c("category","n")
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),category))
counts <- count(counties@data, trunc(Log))
colnames(counts) <- c("category","n")
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),category))
ifelse(counts[2,1] != 1, counts <- arrange(rbind(counts,c(1,0)),category))
?ifelse
ifelse(counts[2,1] != 1, counts <- arrange(rbind(counts,c(1,0)),category), NA)
counts <- count(counties@data, trunc(Log))
colnames(counts) <- c("category","n")
ifelse(counts[1,1] != 0, counts <- arrange(rbind(counts,c(0,0)),category))
ifelse(counts[2,1] != 1, counts <- arrange(rbind(counts,c(1,0)),category), NA)
source("absenteemap.r")
absenteemap("102016 ballots.xls")
View(ballots)
source("absenteemap.r")
absenteemap("102016 ballots.xls")
setwd("/Users/david 1/GitHub/personal-work/mlb-attendance")
source("mlb-attendance.r")
source("mlb-attendance.r")
source("mlb-attendance.r")
